{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sumant/Desktop/Chakra/app/src/Components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nconst Canvas = ({\n  color\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n\n  class Circle {\n    constructor(x, y, dx, dy, radius, context) {\n      this.x = x;\n      this.y = y;\n      this.dx = dx;\n      this.dy = dy;\n      this.context = context;\n      this.radius = radius;\n      this.opacity = Math.random();\n      this.time = 1;\n    }\n\n    draw() {\n      this.context.clearRect(0, 0, this.context.width, this.context.height);\n      this.context.beginPath();\n      this.context.globalAlpha = this.opacity;\n      this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n      this.context.fillStyle = 'white';\n      this.context.fill();\n    }\n\n    update() {\n      if (this.x + this.radius > this.context.width || this.x + this.radius < 0) {\n        this.dx = -this.dx;\n      }\n\n      if (this.y + this.radius > this.context.height || this.y + this.radius < 0) {\n        this.dy = -this.dy;\n      }\n\n      this.x += this.dx;\n      this.y += this.dy;\n      this.time += 1;\n      this.draw();\n    }\n\n  } //   const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  //     ctx.fillStyle = color;\n  //     ctx.beginPath();\n  //     ctx.arc(50, 100, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);\n  //     ctx.fill();\n  //   };\n\n\n  const resizeCanvasToDisplaySize = canvas => {\n    // const { width, height } = canvas.getBoundingClientRect();\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    console.log(width);\n    console.log(height);\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    resizeCanvasToDisplaySize(canvas);\n    let frameCount = 0;\n    let animationFrameId;\n    let circleArray = [];\n\n    for (let i = 0; i < 75; i++) {\n      let radius = Math.random() * 7;\n      let x = Math.random() * (canvas.width - radius * 2) + radius;\n      let y = Math.random() * (canvas.height - radius * 2) + radius;\n      let dx = 0.3 * (Math.random() - 0.5);\n      let dy = 0.3 * (Math.random() - 0.5);\n      circleArray.push(new Circle(x, y, dx, dy, radius));\n    }\n\n    const render = () => {\n      frameCount++;\n\n      for (let i = 0; i < circleArray.length; i++) {\n        circleArray[i].update();\n      }\n\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"absolute\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/sumant/Desktop/Chakra/app/src/Components/Canvas.js"],"names":["React","useRef","useEffect","Box","Canvas","color","canvasRef","Circle","constructor","x","y","dx","dy","radius","context","opacity","Math","random","time","draw","clearRect","width","height","beginPath","globalAlpha","arc","PI","fillStyle","fill","update","resizeCanvasToDisplaySize","canvas","window","innerWidth","innerHeight","console","log","current","getContext","frameCount","animationFrameId","circleArray","i","push","render","length","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,GAAT,QAAoB,kBAApB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC5B,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMM,MAAN,CAAa;AACXC,IAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAOC,EAAP,EAAWC,EAAX,EAAeC,MAAf,EAAuBC,OAAvB,EAAgC;AACzC,WAAKL,CAAL,GAASA,CAAT;AACA,WAAKC,CAAL,GAASA,CAAT;AACA,WAAKC,EAAL,GAAUA,EAAV;AACA,WAAKC,EAAL,GAAUA,EAAV;AACA,WAAKE,OAAL,GAAeA,OAAf;AACA,WAAKD,MAAL,GAAcA,MAAd;AACA,WAAKE,OAAL,GAAeC,IAAI,CAACC,MAAL,EAAf;AACA,WAAKC,IAAL,GAAY,CAAZ;AACD;;AAEDC,IAAAA,IAAI,GAAG;AACL,WAAKL,OAAL,CAAaM,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAAKN,OAAL,CAAaO,KAA1C,EAAiD,KAAKP,OAAL,CAAaQ,MAA9D;AACA,WAAKR,OAAL,CAAaS,SAAb;AACA,WAAKT,OAAL,CAAaU,WAAb,GAA2B,KAAKT,OAAhC;AACA,WAAKD,OAAL,CAAaW,GAAb,CAAiB,KAAKhB,CAAtB,EAAyB,KAAKC,CAA9B,EAAiC,KAAKG,MAAtC,EAA8C,CAA9C,EAAiDG,IAAI,CAACU,EAAL,GAAU,CAA3D,EAA8D,KAA9D;AACA,WAAKZ,OAAL,CAAaa,SAAb,GAAyB,OAAzB;AACA,WAAKb,OAAL,CAAac,IAAb;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,UACE,KAAKpB,CAAL,GAAS,KAAKI,MAAd,GAAuB,KAAKC,OAAL,CAAaO,KAApC,IACA,KAAKZ,CAAL,GAAS,KAAKI,MAAd,GAAuB,CAFzB,EAGE;AACA,aAAKF,EAAL,GAAU,CAAC,KAAKA,EAAhB;AACD;;AAED,UACE,KAAKD,CAAL,GAAS,KAAKG,MAAd,GAAuB,KAAKC,OAAL,CAAaQ,MAApC,IACA,KAAKZ,CAAL,GAAS,KAAKG,MAAd,GAAuB,CAFzB,EAGE;AACA,aAAKD,EAAL,GAAU,CAAC,KAAKA,EAAhB;AACD;;AAED,WAAKH,CAAL,IAAU,KAAKE,EAAf;AACA,WAAKD,CAAL,IAAU,KAAKE,EAAf;AACA,WAAKM,IAAL,IAAa,CAAb;AAEA,WAAKC,IAAL;AACD;;AAzCU,GAHe,CA+C5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMW,yBAAyB,GAAGC,MAAM,IAAI;AAC1C;AACA,UAAMV,KAAK,GAAGW,MAAM,CAACC,UAArB;AACA,UAAMX,MAAM,GAAGU,MAAM,CAACE,WAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYd,MAAZ;;AAEA,QAAIS,MAAM,CAACV,KAAP,KAAiBA,KAAjB,IAA0BU,MAAM,CAACT,MAAP,KAAkBA,MAAhD,EAAwD;AACtDS,MAAAA,MAAM,CAACV,KAAP,GAAeA,KAAf;AACAU,MAAAA,MAAM,CAACT,MAAP,GAAgBA,MAAhB;AACD;AACF,GAXD;;AAaApB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM6B,MAAM,GAAGzB,SAAS,CAAC+B,OAAzB;AACA,UAAMvB,OAAO,GAAGiB,MAAM,CAACO,UAAP,CAAkB,IAAlB,CAAhB;AACAR,IAAAA,yBAAyB,CAACC,MAAD,CAAzB;AACA,QAAIQ,UAAU,GAAG,CAAjB;AACA,QAAIC,gBAAJ;AAEA,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,UAAI7B,MAAM,GAAGG,IAAI,CAACC,MAAL,KAAgB,CAA7B;AACA,UAAIR,CAAC,GAAGO,IAAI,CAACC,MAAL,MAAiBc,MAAM,CAACV,KAAP,GAAeR,MAAM,GAAG,CAAzC,IAA8CA,MAAtD;AACA,UAAIH,CAAC,GAAGM,IAAI,CAACC,MAAL,MAAiBc,MAAM,CAACT,MAAP,GAAgBT,MAAM,GAAG,CAA1C,IAA+CA,MAAvD;AACA,UAAIF,EAAE,GAAG,OAAOK,IAAI,CAACC,MAAL,KAAgB,GAAvB,CAAT;AACA,UAAIL,EAAE,GAAG,OAAOI,IAAI,CAACC,MAAL,KAAgB,GAAvB,CAAT;AACAwB,MAAAA,WAAW,CAACE,IAAZ,CAAiB,IAAIpC,MAAJ,CAAWE,CAAX,EAAcC,CAAd,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,MAAzB,CAAjB;AACD;;AAED,UAAM+B,MAAM,GAAG,MAAM;AACnBL,MAAAA,UAAU;;AACV,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACI,MAAhC,EAAwCH,CAAC,EAAzC,EAA6C;AAC3CD,QAAAA,WAAW,CAACC,CAAD,CAAX,CAAeb,MAAf;AACD;;AACDW,MAAAA,gBAAgB,GAAGR,MAAM,CAACc,qBAAP,CAA6BF,MAA7B,CAAnB;AACD,KAND;;AAOAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXZ,MAAAA,MAAM,CAACe,oBAAP,CAA4BP,gBAA5B;AACD,KAFD;AAGD,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,sBACE,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AAAA,2BACE;AAAQ,MAAA,GAAG,EAAElC;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxGD;;GAAMF,M;;KAAAA,M;AA0GN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nconst Canvas = ({ color }) => {\n  const canvasRef = useRef(null);\n\n  class Circle {\n    constructor(x, y, dx, dy, radius, context) {\n      this.x = x;\n      this.y = y;\n      this.dx = dx;\n      this.dy = dy;\n      this.context = context;\n      this.radius = radius;\n      this.opacity = Math.random();\n      this.time = 1;\n    }\n\n    draw() {\n      this.context.clearRect(0, 0, this.context.width, this.context.height);\n      this.context.beginPath();\n      this.context.globalAlpha = this.opacity;\n      this.context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n      this.context.fillStyle = 'white';\n      this.context.fill();\n    }\n\n    update() {\n      if (\n        this.x + this.radius > this.context.width ||\n        this.x + this.radius < 0\n      ) {\n        this.dx = -this.dx;\n      }\n\n      if (\n        this.y + this.radius > this.context.height ||\n        this.y + this.radius < 0\n      ) {\n        this.dy = -this.dy;\n      }\n\n      this.x += this.dx;\n      this.y += this.dy;\n      this.time += 1;\n\n      this.draw();\n    }\n  }\n\n  //   const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  //     ctx.fillStyle = color;\n  //     ctx.beginPath();\n  //     ctx.arc(50, 100, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);\n  //     ctx.fill();\n  //   };\n\n  const resizeCanvasToDisplaySize = canvas => {\n    // const { width, height } = canvas.getBoundingClientRect();\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    console.log(width);\n    console.log(height);\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    resizeCanvasToDisplaySize(canvas);\n    let frameCount = 0;\n    let animationFrameId;\n\n    let circleArray = [];\n    for (let i = 0; i < 75; i++) {\n      let radius = Math.random() * 7;\n      let x = Math.random() * (canvas.width - radius * 2) + radius;\n      let y = Math.random() * (canvas.height - radius * 2) + radius;\n      let dx = 0.3 * (Math.random() - 0.5);\n      let dy = 0.3 * (Math.random() - 0.5);\n      circleArray.push(new Circle(x, y, dx, dy, radius));\n    }\n\n    const render = () => {\n      frameCount++;\n      for (let i = 0; i < circleArray.length; i++) {\n        circleArray[i].update();\n      }\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n\n  return (\n    <Box position=\"absolute\">\n      <canvas ref={canvasRef} />\n    </Box>\n  );\n};\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}