{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import{Box,ModalBody,Button,Heading,Link,Code,useColorModeValue}from'@chakra-ui/react';import{BsPlay,BsFileEarmarkCode}from'react-icons/bs';var Maps=function Maps(){var firstColor=useColorModeValue('red','yellow');var secondColor=useColorModeValue('blue.600','yellow.200');return/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsxs(ModalBody,{children:[/*#__PURE__*/_jsx(Button,{mr:5,leftIcon:/*#__PURE__*/_jsx(BsPlay,{}),colorScheme:firstColor,size:\"lg\",children:/*#__PURE__*/_jsx(Link,{as:\"a\",_hover:{textDecor:'none'},href:\"https://github.com/sumantguha/Java-Style-Checker\",isExternal:true,children:\"Try Now\"})}),/*#__PURE__*/_jsx(Button,{leftIcon:/*#__PURE__*/_jsx(BsFileEarmarkCode,{}),colorScheme:\"blue\",size:\"lg\",children:/*#__PURE__*/_jsx(Link,{as:\"a\",_hover:{textDecor:'none'},href:\"https://github.com/sumantguha/Java-Style-Checker\",isExternal:true,children:\"View Source Code\"})}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Heading,{display:\"inline-block\",mr:2,size:\"sm\",children:\"Development Frameworks:\"}),/*#__PURE__*/_jsx(Code,{children:\"Java\",mr:2}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"For my datastructures and algorithms coursework, I developed HuskyMaps, a map visualization (similar to google maps) specific to the University of Washington. It uses data about the university campus to plot out the entire university and can give directions between any two points of the campus. It computes distances between the different buildings on campus and acts as a simple front end interface for studets and faculty. It covers more than a standard google maps search within the university because it has a more accurate representation of different buildings. It was very interesting to develop this full stack implementation of the map service, because it required me to work with multiple (Java) frameworks and more importantly, design efficient algorithms at scale. To determine the shortest path between any two buildings/points within campus, an efficient implementation of A* graph search was integrated. The entire grid of buildings was represented as a large graph and hence searching was fairly inexpensive over this structure. To interface with the front-end, we needed to keep track of the exact point that users' clicked, which was done through KD Trees. Overall, multiple algorithms were used within this application to ensure efficient computation and fast response time\"]})});};export default Maps;","map":{"version":3,"sources":["/Users/sumant/Desktop/sumantguha.github.io/src/Pages/Projects/maps.js"],"names":["React","Box","ModalBody","Button","Heading","Link","Code","useColorModeValue","BsPlay","BsFileEarmarkCode","Maps","firstColor","secondColor","textDecor"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,GADF,CAEEC,SAFF,CAGEC,MAHF,CAIEC,OAJF,CAKEC,IALF,CAMEC,IANF,CAOEC,iBAPF,KAQO,kBARP,CASA,OAASC,MAAT,CAAiBC,iBAAjB,KAA0C,gBAA1C,CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjB,GAAMC,CAAAA,UAAU,CAAGJ,iBAAiB,CAAC,KAAD,CAAQ,QAAR,CAApC,CACA,GAAMK,CAAAA,WAAW,CAAGL,iBAAiB,CAAC,UAAD,CAAa,YAAb,CAArC,CACA,mBACE,KAAC,GAAD,wBACE,MAAC,SAAD,yBACE,KAAC,MAAD,EAAQ,EAAE,CAAE,CAAZ,CAAe,QAAQ,cAAE,KAAC,MAAD,IAAzB,CAAqC,WAAW,CAAEI,UAAlD,CAA8D,IAAI,CAAC,IAAnE,uBACE,KAAC,IAAD,EACE,EAAE,CAAC,GADL,CAEE,MAAM,CAAE,CAAEE,SAAS,CAAE,MAAb,CAFV,CAGE,IAAI,CAAC,kDAHP,CAIE,UAAU,CAAE,IAJd,qBADF,EADF,cAWE,KAAC,MAAD,EAAQ,QAAQ,cAAE,KAAC,iBAAD,IAAlB,CAAyC,WAAW,CAAC,MAArD,CAA4D,IAAI,CAAC,IAAjE,uBACE,KAAC,IAAD,EACE,EAAE,CAAC,GADL,CAEE,MAAM,CAAE,CAAEA,SAAS,CAAE,MAAb,CAFV,CAGE,IAAI,CAAC,kDAHP,CAIE,UAAU,CAAE,IAJd,8BADF,EAXF,cAqBE,aArBF,cAsBE,aAtBF,cAuBE,KAAC,OAAD,EAAS,OAAO,CAAC,cAAjB,CAAgC,EAAE,CAAE,CAApC,CAAuC,IAAI,CAAC,IAA5C,qCAvBF,cA0BE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,CAAsB,EAAE,CAAE,CAA1B,EA1BF,cA2BE,aA3BF,cA4BE,aA5BF,kxCADF,EADF,CAqDD,CAxDD,CA0DA,cAAeH,CAAAA,IAAf","sourcesContent":["import React from 'react';\nimport {\n  Box,\n  ModalBody,\n  Button,\n  Heading,\n  Link,\n  Code,\n  useColorModeValue,\n} from '@chakra-ui/react';\nimport { BsPlay, BsFileEarmarkCode } from 'react-icons/bs';\n\nconst Maps = () => {\n  const firstColor = useColorModeValue('red', 'yellow');\n  const secondColor = useColorModeValue('blue.600', 'yellow.200');\n  return (\n    <Box>\n      <ModalBody>\n        <Button mr={5} leftIcon={<BsPlay />} colorScheme={firstColor} size=\"lg\">\n          <Link\n            as=\"a\"\n            _hover={{ textDecor: 'none' }}\n            href=\"https://github.com/sumantguha/Java-Style-Checker\"\n            isExternal={true}\n          >\n            Try Now\n          </Link>\n        </Button>\n        <Button leftIcon={<BsFileEarmarkCode />} colorScheme=\"blue\" size=\"lg\">\n          <Link\n            as=\"a\"\n            _hover={{ textDecor: 'none' }}\n            href=\"https://github.com/sumantguha/Java-Style-Checker\"\n            isExternal={true}\n          >\n            View Source Code\n          </Link>\n        </Button>\n        <br />\n        <br />\n        <Heading display=\"inline-block\" mr={2} size=\"sm\">\n          Development Frameworks:\n        </Heading>\n        <Code children=\"Java\" mr={2} />\n        <br />\n        <br />\n        For my datastructures and algorithms coursework, I developed HuskyMaps,\n        a map visualization (similar to google maps) specific to the University\n        of Washington. It uses data about the university campus to plot out the\n        entire university and can give directions between any two points of the\n        campus. It computes distances between the different buildings on campus\n        and acts as a simple front end interface for studets and faculty. It\n        covers more than a standard google maps search within the university\n        because it has a more accurate representation of different buildings. It\n        was very interesting to develop this full stack implementation of the\n        map service, because it required me to work with multiple (Java)\n        frameworks and more importantly, design efficient algorithms at scale.\n        To determine the shortest path between any two buildings/points within\n        campus, an efficient implementation of A* graph search was integrated.\n        The entire grid of buildings was represented as a large graph and hence\n        searching was fairly inexpensive over this structure. To interface with\n        the front-end, we needed to keep track of the exact point that users'\n        clicked, which was done through KD Trees. Overall, multiple algorithms\n        were used within this application to ensure efficient computation and\n        fast response time\n      </ModalBody>\n    </Box>\n  );\n};\n\nexport default Maps;\n"]},"metadata":{},"sourceType":"module"}