{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sumant/Desktop/Chakra/app/src/Components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nconst Canvas = ({\n  color\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n\n  class Circle {\n    constructor(x, y, dx, dy, radius, canvas) {\n      this.x = x;\n      this.y = y;\n      this.dx = dx;\n      this.dy = dy;\n      this.canvas = canvas;\n      this.radius = radius;\n      this.opacity = Math.random();\n      this.time = 1;\n    }\n\n    draw() {\n      this.canvas.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.canvas.beginPath();\n      this.canvas.globalAlpha = this.opacity;\n      this.canvas.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n      this.canvas.fillStyle = 'white';\n      this.canvas.fill();\n    }\n\n    update() {\n      if (this.x + this.radius > this.canvas.width || this.x + this.radius < 0) {\n        this.dx = -this.dx;\n      }\n\n      if (this.y + this.radius > this.canvas.height || this.y + this.radius < 0) {\n        this.dy = -this.dy;\n      }\n\n      this.x += this.dx;\n      this.y += this.dy;\n      this.time += 1;\n      this.draw();\n    }\n\n  } //   const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  //     ctx.fillStyle = color;\n  //     ctx.beginPath();\n  //     ctx.arc(50, 100, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);\n  //     ctx.fill();\n  //   };\n\n\n  const resizeCanvasToDisplaySize = canvas => {\n    // const { width, height } = canvas.getBoundingClientRect();\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    console.log(width);\n    console.log(height);\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    resizeCanvasToDisplaySize(canvas);\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"absolute\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/sumant/Desktop/Chakra/app/src/Components/Canvas.js"],"names":["React","useRef","useEffect","Box","Canvas","color","canvasRef","Circle","constructor","x","y","dx","dy","radius","canvas","opacity","Math","random","time","draw","clearRect","width","height","beginPath","globalAlpha","arc","PI","fillStyle","fill","update","resizeCanvasToDisplaySize","window","innerWidth","innerHeight","console","log","current","context","getContext","frameCount","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nconst Canvas = ({ color }) => {\n  const canvasRef = useRef(null);\n\n  class Circle {\n    constructor(x, y, dx, dy, radius, canvas) {\n      this.x = x;\n      this.y = y;\n      this.dx = dx;\n      this.dy = dy;\n      this.canvas = canvas;\n      this.radius = radius;\n      this.opacity = Math.random();\n      this.time = 1;\n    }\n\n    draw() {\n      this.canvas.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.canvas.beginPath();\n      this.canvas.globalAlpha = this.opacity;\n      this.canvas.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n      this.canvas.fillStyle = 'white';\n      this.canvas.fill();\n    }\n\n    update() {\n      if (\n        this.x + this.radius > this.canvas.width ||\n        this.x + this.radius < 0\n      ) {\n        this.dx = -this.dx;\n      }\n\n      if (\n        this.y + this.radius > this.canvas.height ||\n        this.y + this.radius < 0\n      ) {\n        this.dy = -this.dy;\n      }\n\n      this.x += this.dx;\n      this.y += this.dy;\n      this.time += 1;\n\n      this.draw();\n    }\n  }\n\n  //   const draw = (ctx, frameCount) => {\n  //     ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  //     ctx.fillStyle = color;\n  //     ctx.beginPath();\n  //     ctx.arc(50, 100, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);\n  //     ctx.fill();\n  //   };\n\n  const resizeCanvasToDisplaySize = canvas => {\n    // const { width, height } = canvas.getBoundingClientRect();\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    console.log(width);\n    console.log(height);\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    resizeCanvasToDisplaySize(canvas);\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n\n  return (\n    <Box position=\"absolute\">\n      <canvas ref={canvasRef} />\n    </Box>\n  );\n};\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}