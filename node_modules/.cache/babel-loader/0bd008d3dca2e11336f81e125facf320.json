{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/sumant/Desktop/Chakra/app/src/Components/Canvas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nconst Canvas = ({\n  color\n}) => {\n  _s();\n\n  const canvasRef = useRef(null);\n\n  const draw = (ctx, frameCount, w, h) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(50, 100, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  const resizeCanvasToDisplaySize = canvas => {\n    // const { width, height } = canvas.getBoundingClientRect();\n    console.log(w);\n    console.log(h);\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    resizeCanvasToDisplaySize(canvas);\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"absolute\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n\n_c = Canvas;\nexport default Canvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"sources":["/Users/sumant/Desktop/Chakra/app/src/Components/Canvas.js"],"names":["React","useRef","useEffect","Box","Canvas","color","canvasRef","draw","ctx","frameCount","w","h","clearRect","canvas","width","height","fillStyle","beginPath","arc","Math","sin","PI","fill","resizeCanvasToDisplaySize","console","log","current","context","getContext","animationFrameId","render","window","requestAnimationFrame","cancelAnimationFrame"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,GAAT,QAAoB,kBAApB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC5B,QAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMM,IAAI,GAAG,CAACC,GAAD,EAAMC,UAAN,EAAkBC,CAAlB,EAAqBC,CAArB,KAA2B;AACtCH,IAAAA,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBJ,GAAG,CAACK,MAAJ,CAAWC,KAA/B,EAAsCN,GAAG,CAACK,MAAJ,CAAWE,MAAjD;AACAP,IAAAA,GAAG,CAACQ,SAAJ,GAAgBX,KAAhB;AACAG,IAAAA,GAAG,CAACS,SAAJ;AACAT,IAAAA,GAAG,CAACU,GAAJ,CAAQ,EAAR,EAAY,GAAZ,EAAiB,KAAKC,IAAI,CAACC,GAAL,CAASX,UAAU,GAAG,IAAtB,KAA+B,CAArD,EAAwD,CAAxD,EAA2D,IAAIU,IAAI,CAACE,EAApE;AACAb,IAAAA,GAAG,CAACc,IAAJ;AACD,GAND;;AAQA,QAAMC,yBAAyB,GAAGV,MAAM,IAAI;AAC1C;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYf,CAAZ;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYd,CAAZ;;AAEA,QAAIE,MAAM,CAACC,KAAP,KAAiBA,KAAjB,IAA0BD,MAAM,CAACE,MAAP,KAAkBA,MAAhD,EAAwD;AACtDF,MAAAA,MAAM,CAACC,KAAP,GAAeA,KAAf;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgBA,MAAhB;AACD;AACF,GATD;;AAWAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,MAAM,GAAGP,SAAS,CAACoB,OAAzB;AACA,UAAMC,OAAO,GAAGd,MAAM,CAACe,UAAP,CAAkB,IAAlB,CAAhB;AACAL,IAAAA,yBAAyB,CAACV,MAAD,CAAzB;AACA,QAAIJ,UAAU,GAAG,CAAjB;AACA,QAAIoB,gBAAJ;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACnBrB,MAAAA,UAAU;AACVF,MAAAA,IAAI,CAACoB,OAAD,EAAUlB,UAAV,CAAJ;AACAoB,MAAAA,gBAAgB,GAAGE,MAAM,CAACC,qBAAP,CAA6BF,MAA7B,CAAnB;AACD,KAJD;;AAKAA,IAAAA,MAAM;AAEN,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,oBAAP,CAA4BJ,gBAA5B;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACtB,IAAD,CAjBM,CAAT;AAmBA,sBACE,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAC,UAAd;AAAA,2BACE;AAAQ,MAAA,GAAG,EAAED;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9CD;;GAAMF,M;;KAAAA,M;AAgDN,eAAeA,MAAf","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { Box } from '@chakra-ui/react';\n\nconst Canvas = ({ color }) => {\n  const canvasRef = useRef(null);\n\n  const draw = (ctx, frameCount, w, h) => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(50, 100, 20 * Math.sin(frameCount * 0.05) ** 2, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  const resizeCanvasToDisplaySize = canvas => {\n    // const { width, height } = canvas.getBoundingClientRect();\n    console.log(w);\n    console.log(h);\n\n    if (canvas.width !== width || canvas.height !== height) {\n      canvas.width = width;\n      canvas.height = height;\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    resizeCanvasToDisplaySize(canvas);\n    let frameCount = 0;\n    let animationFrameId;\n\n    const render = () => {\n      frameCount++;\n      draw(context, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [draw]);\n\n  return (\n    <Box position=\"absolute\">\n      <canvas ref={canvasRef} />\n    </Box>\n  );\n};\n\nexport default Canvas;\n"]},"metadata":{},"sourceType":"module"}