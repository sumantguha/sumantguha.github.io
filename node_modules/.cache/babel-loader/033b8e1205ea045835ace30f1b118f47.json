{"ast":null,"code":"import _slicedToArray from \"/Users/sumant/Desktop/sumantguha.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n\nvar _createContext = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    FormControlProvider = _createContext2[0],\n    useFormControlContext = _createContext2[1];\n\nexport { useFormControlContext };\n\nfunction useFormControlProvider(props) {\n  var idProp = props.id,\n      isRequired = props.isRequired,\n      isInvalid = props.isInvalid,\n      isDisabled = props.isDisabled,\n      isLoading = props.isLoading,\n      isReadOnly = props.isReadOnly,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isLoading\", \"isReadOnly\"]); // Generate all the required ids\n\n\n  var uuid = useId();\n  var id = idProp || \"field-\" + uuid;\n  var labelId = id + \"-label\";\n  var feedbackId = id + \"-feedback\";\n  var helpTextId = id + \"-helptext\";\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`\n   */\n\n  var _useBoolean = useBoolean(),\n      _useBoolean2 = _slicedToArray(_useBoolean, 2),\n      hasHelpText = _useBoolean2[0],\n      setHasHelpText = _useBoolean2[1]; // Let's keep track of when we focus the form element (e.g, `input`)\n\n\n  var _useBoolean3 = useBoolean(),\n      _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n      isFocused = _useBoolean4[0],\n      setFocus = _useBoolean4[1];\n\n  var context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText: hasHelpText,\n    setHasHelpText: setHasHelpText,\n    id: id,\n    labelId: labelId,\n    feedbackId: feedbackId,\n    helpTextId: helpTextId,\n    htmlProps: htmlProps\n  };\n  return context;\n}\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\n\n\nexport var FormControl = /*#__PURE__*/forwardRef(function FormControl(props, ref) {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n      htmlProps = _useFormControlProvid.htmlProps,\n      context = _objectWithoutPropertiesLoose(_useFormControlProvid, [\"htmlProps\"]);\n\n  var _className = cx(\"chakra-form-control\", props.className);\n\n  return /*#__PURE__*/React.createElement(FormControlProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"group\",\n    ref: ref\n  }, htmlProps, {\n    className: _className,\n    __css: {\n      width: \"100%\",\n      position: \"relative\"\n    }\n  }))));\n});\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\";\n}\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\n\n\nexport var FormHelperText = /*#__PURE__*/forwardRef(function FormHelperText(props, ref) {\n  var _props$id;\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  /**\n   * Notify the field context when the help text is rendered on\n   * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n   */\n\n  useSafeLayoutEffect(function () {\n    if (field == null ? void 0 : field.isInvalid) {\n      return undefined;\n    }\n\n    field == null ? void 0 : field.setHasHelpText.on();\n    return function () {\n      return field == null ? void 0 : field.setHasHelpText.off();\n    };\n  }, []);\n\n  if (field == null ? void 0 : field.isInvalid) {\n    return null;\n  }\n\n  var _className = cx(\"chakra-form__helper-text\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles.helperText\n  }, props, {\n    className: _className,\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.helpTextId\n  }));\n});\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\";\n}","map":{"version":3,"sources":["../../src/form-control.tsx"],"names":["createContext","strict","name","id","isReadOnly","uuid","useId","idProp","labelId","feedbackId","helpTextId","useBoolean","context","isRequired","isInvalid","isLoading","isDisabled","isFocused","onFocus","setFocus","onBlur","hasHelpText","setHasHelpText","htmlProps","FormControl","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","useFormControlProvider","_className","cx","props","ref","width","position","FormHelperText","field","useFormControlContext","useStyles","useSafeLayoutEffect","helperText"],"mappings":"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","sourcesContent":["import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the form control will be in its `loading` state\n   */\n  isLoading?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<ControlContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Let's keep track of when we focus the form element (e.g, `input`)\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n    const _className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            role=\"group\"\n            ref={ref}\n            {...htmlProps}\n            className={_className}\n            __css={{\n              width: \"100%\",\n              position: \"relative\",\n            }}\n          />\n        </StylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    /**\n     * Notify the field context when the help text is rendered on\n     * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n     */\n    useSafeLayoutEffect(() => {\n      if (field?.isInvalid) {\n        return undefined\n      }\n\n      field?.setHasHelpText.on()\n      return () => field?.setHasHelpText.off()\n    }, [])\n\n    if (field?.isInvalid) {\n      return null\n    }\n\n    const _className = cx(\"chakra-form__helper-text\", props.className)\n\n    return (\n      <chakra.div\n        ref={ref}\n        __css={styles.helperText}\n        {...props}\n        className={_className}\n        id={props.id ?? field?.helpTextId}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"]},"metadata":{},"sourceType":"module"}